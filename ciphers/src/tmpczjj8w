extern crate rand;

use std::io;
use std::cmp::Ordering; 
use std::ascii::AsciiExt;
use rand::Rng;

struct cipherPolyalphabe
{
	name: String,
	left: usize,
	right: usize,
}

impl Philosopher 
{
	fn new(name: &str, left: usize, right: usize) -> Philosopher
	{
		Philosopher
		{
			name: name.to_string(),
			left: left,
			right: right,
		}
	}

	fn eat(&self, table: &Table)
	{
		let _left = table.forks[self.left].lock().unwrap();
		let _right = table.forks[self.right].lock().unwrap();

		println!("\n{} is eating.", self.name);

		thread::sleep_ms(1000);

		println!("\n{} is done eating.", self.name);
	}
}


fn main() 
{
    println!("Hello, world!\n");

    println!("Please select a cipher type:");
    println!("[P]olyalphabetic:");
    println!("[X]OR");
    println!("[O]ne Time Pad");

    let mut cipher = String::new();

    io::stdin().read_line(&mut cipher)
    	.ok()
    	.expect("Failed to read line");

    if cipher.eq_ignore_ascii_case("P") || cipher.eq_ignore_ascii_case("Polyalphabetic")
    {

    }
    else if cipher.eq_ignore_ascii_case("x") || cipher.eq_ignore_ascii_case("XOR")
    {

    }
    else if cipher.eq_ignore_ascii_case("O") || cipher.eq_ignore_ascii_case("One Time Pad")
    {

    }

}
